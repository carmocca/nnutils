import os
import re
import subprocess

from setuptools import setup
from torch.utils.ffi import create_extension

# Configure package name
# CPU-only: nnutils_pytorch
# CUDA 7.5: nnutils_pytorch_cu75
# CUDA 8.0: nnutils_pytorch_cu80
# CUDA 9.0: nnutils_pytorch_cu90
PACKAGE_NAME = '${NNUTILS_PYTORCH_PACKAGE}'
URL = 'https://github.com/jpuigcerver/nnutils'
AUTHOR = 'Joan Puigcerver'
AUTHOR_EMAIL = 'joapuipe@gmail.com'
MANTAINER = AUTHOR
MANTAINER_EMAIL = AUTHOR_EMAIL
DESCRIPTION = 'PyTorch bindings of the nnutils library'
CLASSIFIERS = [
    'Development Status :: 3 - Alpha',
    'Intended Audience :: Developers',
    'Intended Audience :: Education',
    'Intended Audience :: Science/Research',
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python :: 2',
    'Programming Language :: Python :: 2.7',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.5',
    'Programming Language :: Python :: 3.6',
    'Topic :: Scientific/Engineering',
    'Topic :: Scientific/Engineering :: Artificial Intelligence',
    'Topic :: Scientific/Engineering :: Image Recognition',
    'Topic :: Software Development',
    'Topic :: Software Development :: Libraries',
    'Topic :: Software Development :: Libraries :: Python Modules',
]

# Configure package version number
cwd = os.path.dirname(os.path.abspath(__file__))
version = '0.1.0'
if os.getenv('NNUTILS_BUILD_VERSION'):
    version = os.getenv('PYTORCH_BUILD_VERSION')
else:
    try:
        sha = subprocess.check_output(['git', 'rev-parse', 'HEAD'], cwd=cwd).decode('ascii').strip()
        version += '+' + sha[:7]
    except Exception:
        pass

WITH_CUDA = True if ('${PYTORCH_CUDA}').upper() == 'ON' else False

headers = ['${PROJECT_SOURCE_DIR}/pytorch/src/cpu/mask_image_from_size.h',
           '${PROJECT_SOURCE_DIR}/pytorch/src/cpu/adaptive_avgpool_2d.h',
           '${PROJECT_SOURCE_DIR}/pytorch/src/cpu/adaptive_maxpool_2d.h']
if WITH_CUDA:
    headers += ['${PROJECT_SOURCE_DIR}/pytorch/src/gpu/mask_image_from_size.h',
                '${PROJECT_SOURCE_DIR}/pytorch/src/gpu/adaptive_avgpool_2d.h',
                '${PROJECT_SOURCE_DIR}/pytorch/src/gpu/adaptive_maxpool_2d.h']

include_dirs=['${PROJECT_SOURCE_DIR}'] + '${_EXTERNAL_DIRS}'.split(';')

library_dirs=['${PROJECT_BINARY_DIR}/src']

external_libs='${_EXTERNAL_LIBS}'.split(';')


extra_objects=[]
libraries=['stdc++']
for lib in external_libs:
    if lib[:2] == '-l':
        libraries.append(lib[2:])
    elif re.match(r'^.*\.[^./\\]+$', lib) is not None:
        extra_objects.append(lib)
    else:
        libraries.append(lib)

ffi = create_extension(
    name='nnutils',
    language='c',
    headers=headers,
    sources=[],
    with_cuda=WITH_CUDA,
    include_dirs=include_dirs,
    library_dirs=library_dirs,
    libraries=libraries,
    extra_objects=extra_objects,
    verbose=True)

ffi = ffi.distutils_extension()
ffi.name = 'nnutils_pytorch._nnutils'

if __name__ == '__main__':
    setup(
        author=AUTHOR,
        author_email=AUTHOR_EMAIL,
        classifiers=CLASSIFIERS,
        description=DESCRIPTION,
        ext_modules=[ffi],
        install_requires=['torch', 'cffi'],
        license='MIT',
        mantainer=MANTAINER,
        mantainer_email=MANTAINER_EMAIL,
        name=PACKAGE_NAME,
        packages=['nnutils_pytorch'],
        package_dir={'': '${CMAKE_CURRENT_SOURCE_DIR}'},
        url=URL,
        version=version)
