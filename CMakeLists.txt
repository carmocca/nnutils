CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
PROJECT(nnutils)
ENABLE_TESTING()

OPTION(WITH_CUDA "Compile binaries with CUDA support" ON)
OPTION(WITH_OPENMP "Compile with OpenMP support" ON)
OPTION(WITH_PERFTOOLS "Compile with Google Perftools support" OFF)
OPTION(WITH_PYTORCH "Compile with PyTorch bindings" ON)
OPTION(WITH_TESTS "Compile test" ON)

SET(CUDA_ARCH_LIST "Auto" CACHE STRING "Compile with support for these CUDA architectures")

LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

FIND_PACKAGE(Threads REQUIRED)
FIND_PACKAGE(CUDA)
FIND_PACKAGE(OpenMP)
FIND_PACKAGE(Perftools)
FIND_PACKAGE(PyTorch)
FIND_PACKAGE(GTest)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
INCLUDE_DIRECTORIES(${GLOG_INCLUDE_DIRS})
SET(CUDA_PROPAGATE_HOST_FLAGS OFF)


SET(CMAKE_CXX_FLAGS "-std=c++11 -pedantic -Wall -fPIC")
IF(OPENMP_FOUND AND WITH_OPENMP)
  SET(CMAKE_CXX_FLAGS
    "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  SET(CMAKE_EXE_LINKER_FLAGS
    "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
ENDIF()


IF(CUDA_FOUND AND WITH_CUDA)
  IF(NOT COMMAND CUDA_SELECT_NVCC_ARCH_FLAGS)
    INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/select_compute_arch.cmake)
  ENDIF()

  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITH_CUDA")
  SET(CUDA_NVCC_FLAGS "-std=c++11 -lineinfo")
  SET(CUDA_NVCC_FLAGS
    "${CUDA_NVCC_FLAGS} -Xcompiler -Wall,${OpenMP_CXX_FLAGS},-fPIC")
  SET(CUDA_NVCC_FLAGS
    "${CUDA_NVCC_FLAGS} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}}")
  SET(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -DWITH_CUDA")
  IF(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 5 AND
     CUDA_VERSION VERSION_LESS 8)
    SET(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -D_MWAITXINTRIN_H_INCLUDED")
    SET(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -D_FORCE_INLINES")
  ENDIF()
  CUDA_SELECT_NVCC_ARCH_FLAGS(NVCC_FLAGS_EXTRA ${CUDA_ARCH_LIST})
  LIST(APPEND CUDA_NVCC_FLAGS ${NVCC_FLAGS_EXTRA})
ELSE()
  SET(WITH_CUDA OFF)
ENDIF(CUDA_FOUND AND WITH_CUDA)


IF(Perftools_FOUND AND WITH_PERFTOOLS)
  MESSAGE(STATUS "Google Perftools found! Linking with ${Perftools_LIBRARIES}")
  INCLUDE_DIRECTORIES(${Perftools_INCLUDE_DIRS})
  LIST(APPEND COMMON_LIBRARIES "${Perftools_LIBRARIES}")
  IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    SET(CMAKE_CXX_FLAGS
      "${CMAKE_CXX_FLAGS} -fno-builtin-malloc -fno-builtin-calloc -fno-builtin-realloc -fno-builtin-free")
  ENDIF()
  IF (CUDA_FOUND)
    SET(CUDA_NVCC_FLAGS
      "${CUDA_NVCC_FLAGS} -Xcompiler -fno-builtin-malloc,-fno-builtin-calloc,-fno-builtin-realloc,-fno-builtin-free")
  ENDIF()
ENDIF()

ADD_SUBDIRECTORY(nnutils)
ADD_SUBDIRECTORY(pytorch)
ADD_SUBDIRECTORY(THW)
